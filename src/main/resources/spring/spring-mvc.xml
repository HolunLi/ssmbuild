<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!-- 开启注解扫描, com.holun.controller包下的注解才能生效 -->
    <context:component-scan base-package="com.holun.controller" />

    <!-- 注解驱动（开启注解驱动后,就无需再手动的注入处理器映射器和处理器适配器） -->
    <mvc:annotation-driven />
    <!--
    mvc:annotation-driven的作用
    Spring 3.0.x中使用了mvc:annotation-driven后，默认会帮我们注册默认处理请求，参数和返回值的类，
    其中最主要的两个类：DefaultAnnotationHandlerMapping 和 AnnotationMethodHandlerAdapter ，
    分别为HandlerMapping的实现类和HandlerAdapter的实现类。
    从3.1.x版本开始对应实现类改为了RequestMappingHandlerMapping和RequestMappingHandlerAdapter。

    HandlerMapping的实现类的作用
    实现类RequestMappingHandlerMapping，它会处理@RequestMapping 注解，并将其注册到请求映射表中。

    HandlerAdapter的实现类的作用
    实现类RequestMappingHandlerAdapter，则是处理请求的适配器，确定调用哪个类的哪个方法，并且构造方法参数，返回值。

    当配置了mvc:annotation-driven后，Spring就知道了我们启用注解驱动。然后Spring通过context:component-scan/标签的配置，
    会自动为我们将扫描到的@Component，@Controller，@Service，@Repository等注解标记的组件注册到工厂中，来处理我们的请求。
    -->


    <!--过滤静态资源-->
   <!-- 如果将DispatcherServlet请求映射配置为"/"，则将会拦截所有的请求，其中就包括静态资源的请求。
    DispatcherServlet会把静态资源的请求当成一个普通的请求处理，由于对静态资源的请求找不到对应的处理器来处理，因此会发生服务器错误。-->
    <mvc:default-servlet-handler />
    <!--org.springframework.web.servlet.resource.DefaultServletHttpRequestHandler，
    它就像一个检查员，对DispatcherServlet拦截的请求进行筛查，如果发现是静态资源的请求，就将该请求转由Web应用服务器默认的Servlet处理，
    如果不是静态资源的请求，才由DispatcherServlet继续处理。-->

    <!-- 注入视图解析器 -->
    <bean id="internalResourceViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/jsp/" />
        <property name="suffix" value=".jsp" />
    </bean>

</beans>